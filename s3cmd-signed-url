#! /bin/bash

# Thanks to http://cuz.cx/vince_riv/2013/04/create-signed-s3-url-using-s3cmd/

set -e

usage() {
    echo "$(basename ${0}) -b bucket -o object_uri_part [-a access_key] [-s seconds]"
    echo "- a script to create temporary signed urls for private objects in a S3 bucket."
    echo ""
    echo "Options:"
    echo "  -b bucket_name: S3 Bucket"
    echo "  -o object_uri: URI part of object in S3 bucket - e.g. somefolder/somefile.ext"
    echo "  -m http_method: HTTP method to sign - e.g. PUT (default ${S3_HTTP_METHOD})"
    echo "  -a access_key: S3 Access Key (default ${S3_ACCESS_KEY})"
    echo "  -s seconds: how long the signed url will be valid (default ${SECONDS})"
    echo "  -p: use path style (e.g. https://example.com/bucket) for buckets instead of the default hosted style (e.g. https://bucket.example.com)"
    echo "  -c configfile: which s3cfg configuration file to use"
    echo "  -h: to see this text"
}

set_access_key() {
    # extract access key from .s3cfg
    if [ -e "${S3CFG}" ]; then
        S3_ACCESS_KEY=$(sed -n 's/^access_key = //p' "${S3CFG}")
    fi
}

set_secret_key() {
    # extract secret key from .s3cfg
    if [ -e "${S3CFG}" ]; then
        S3_SECRET_KEY=$(sed -n 's/^secret_key = //p' "${S3CFG}")
    fi
}

set_host_base() {
    # extract host base from .s3cfg
    if [ -e "${S3CFG}" ]; then
        S3_HOST_BASE=$(sed -n 's/^host_base = //p' "${S3CFG}")
    fi
}

# https://gist.github.com/cdown/1163649#gistcomment-1914130
function urlencode() {
        local LANG=C
        for ((i=0;i<${#1};i++)); do
                if [[ ${1:$i:1} =~ ^[a-zA-Z0-9\.\~\_\-]$ ]]; then
                        printf "${1:$i:1}"
                else
                        printf '%%%02X' "'${1:$i:1}"
                fi
        done
}

create_signed_url() {
    # 1-hour expiration
    TIMESTAMP=$((`date +%s` + ${SECONDS}))
    # string to sign: method + expiration-time + bucket/object
    local can_string="${S3_HTTP_METHOD}\n\n\n${TIMESTAMP}\n/${S3_BUCKET}/${S3_OBJECT}"
    #echo "about to sign:"
    #echo "----"
    #echo ${can_string}
    #echo "----"
    # generate the signature
    #SIGNATURE=$(s3cmd sign "$(echo -e "$can_string")" | sed -n 's/^Signature: //p')
    SIGNATURE=$(echo -en $can_string |
      openssl dgst -sha1 -binary -hmac "${S3_SECRET_KEY}" |
      openssl base64)
    if [ -z "$SIGNATURE" ]; then
        echo "Failed to created signed URL for '${S3_OBJECT}' in bucket '${S3_BUCKET}'" >&2
        exit 4
    fi
    SIGNATURE=$(urlencode $SIGNATURE)
}

output() {
    if [ "$S3_PATH_STYLE" = true ]; then
        local base_url="https://${S3_HOST_BASE}/${S3_BUCKET}/${S3_OBJECT}"
    else
        local base_url="https://${S3_BUCKET}.${S3_HOST_BASE}/${S3_OBJECT}"
    fi

    local params="AWSAccessKeyId=${S3_ACCESS_KEY}&Expires=${TIMESTAMP}&Signature=${SIGNATURE}"
    echo "$base_url?$params"
}

SECONDS=3600
S3_HTTP_METHOD="GET"
S3CFG="${HOME}/.s3cfg"

while getopts "phb:o:m:a:c:s:" OPT; do
    case "$OPT" in
        h)
            usage
            exit 0
            ;;
        b)
            S3_BUCKET="${OPTARG}"
            ;;
        o)
            S3_OBJECT="${OPTARG}"
            ;;
        m)
            S3_HTTP_METHOD="${OPTARG}"
            ;;
        a)
            S3_ACCESS_KEY="${OPTARG}"
            ;;
        p)
            S3_PATH_STYLE=true
            ;;

        c)
            S3CFG="${OPTARG}"
            ;;
        s)
            SECONDS="${OPTARG}"
            ;;
    esac
done

set_access_key
set_secret_key
set_host_base

if [ -z "$S3_ACCESS_KEY" ]; then
    echo "Please provide your S3 access key."
    exit 1
fi

if [ -z "$S3_BUCKET" ]; then
    echo "Please provide your S3 bucket name."
    exit 2
fi

if [ -z "$S3_OBJECT" ]; then
    echo "Please provide the object you want a signed URL for."
    exit 3
fi

if [ "$S3_HTTP_METHOD" != "GET" -a "$S3_HTTP_METHOD" != "PUT" ]; then
    echo "HTTP method is unknown: '$S3_HTTP_METHOD' (use GET or PUT)"
    exit 4
fi

create_signed_url
output
